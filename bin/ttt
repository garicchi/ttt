#!/usr/bin/env python
from pathlib import Path
import argparse
from typing import List, Tuple, Union, Dict
import copy
import sys
import re
import subprocess
import tempfile
import unicodedata


VERSION = "0.1.2"


class ResolvedBlockOneline:
    """
    1行で解決できるパターンのコンフリクトデータ構造
    """
    resolve_type = ''
    body = [[]]

    def __init__(self, resolve_type, body):
        self.resolve_type = resolve_type
        self.body = body

    def concat(self, block):
        self.body.extend(block.body)

    def to_rows(self):
        return self.body


class ResolvedBlockMultiline:
    """
    複数行で解決できるパターンのコンフリクトデータ構造
    """
    resolve_type = ''
    top_marker = []
    top_body = [[]]
    middle_marker = []
    bottom_body = [[]]
    bottom_marker = []

    def __init__(self, resolve_type, top_marker, top_body, middle_marker, bottom_body, bottom_marker):
        self.resolve_type = resolve_type
        self.top_marker = top_marker
        self.top_body = top_body
        self.middle_marker = middle_marker
        self.bottom_body = bottom_body
        self.bottom_marker = bottom_marker

    def concat(self, block):
        self.top_body.extend(block.top_body)
        self.bottom_body.extend(block.bottom_body)

    def to_rows(self):
        result = []
        result.append(self.top_marker)
        result.extend([x for x in self.top_body if x])
        result.append(self.middle_marker)
        result.extend([x for x in self.bottom_body if x])
        result.append(self.bottom_marker)
        return result


class TableData:
    def __init__(self):
        self.head = []
        self.rows = []
        self.is_conflict = False

    def load(self, file_path: Path, delim='\t'):
        with open(file_path) as f:
            self.head = f.readline().rstrip('\n').split(delim)
            lines = f.readlines()
            self.rows = []
            self.is_conflict = False
            for l in lines:
                cells = l.rstrip('\n').split(delim)
                if ''.join(cells) == '=======':
                    self.is_conflict = True
                self.rows.append(cells)
            if self.is_conflict:
                marker_begin = re.compile(r'^<<<<<<< .*$')
                marker_middle = re.compile(r'^=======$')
                # これはヘッダーもコンフリクトしてるパターン
                if marker_begin.search(self.head[0]):
                    marker = self.head[0]
                    many_head = self.rows[0]
                    for i, row in enumerate(self.rows):
                        if marker_middle.search(row[0]):
                            if len(self.rows[i + 1]) > len(many_head):
                                many_head = self.rows[i + 1]
                            break
                    self.head = many_head
                    self.rows.insert(0, [marker])

    def save(self, file_path: Path, delim='\t'):
        with open(file_path, 'w') as f:
            result = [delim.join([f'{x}' for i, x in enumerate(self.head)])]
            for row in self.rows:
                result_row = delim.join(
                    [f'{row[i]}' for i, x in enumerate(self.head) if
                     i < len(row)]
                )
                result.append(result_row)
            f.write('\n'.join(result) + '\n')

    def join(self, table, on_col_our: str, on_col_their: str):
        if on_col_our not in self.head:
            raise Exception(f'{on_col_our} column is not in table')
        on_col_our_pos = self.head.index(on_col_our)
        if on_col_their not in table.head:
            raise Exception(f'{on_col_their} column is not in table')
        on_col_their_pos = table.head.index(on_col_their)
        self.head += table.head
        for index, row in enumerate(self.rows):
            their_row = [x for x in table.rows if
                         x[on_col_their_pos] == row[on_col_our_pos]]
            if their_row:
                row += their_row[0]
            else:
                row += ['' for x in table.head]

    def sort(self, column: str, reverse: bool = False):
        sort_col_pos = self.head.index(column)
        is_numeric = True
        try:
            float(self.rows[0][sort_col_pos])
        except ValueError:
            is_numeric = False
        self.rows.sort(
            key=lambda x: float(x[sort_col_pos]) if is_numeric else x[
                sort_col_pos], reverse=reverse
        )

    def add_column(self, name: str, default: str = '', before: str = None):
        if before:
            insert_pos = self.head.index(before)
        else:
            insert_pos = len(self.head)
        self.head.insert(insert_pos, name)
        for row in self.rows:
            row.insert(insert_pos, default)

    def remove_column(self, name: str):
        pos = self.head.index(name)
        del self.head[pos]
        for row in self.rows:
            if pos < len(row):
                del row[pos]

    def edit_data(self, key_column: str, key_data: str, edit_column: str,
                  edit_data: str):
        key_pos = self.head.index(key_column)
        edit_pos = self.head.index(edit_column)
        is_modify = False
        key_regex = re.compile(key_data)
        for row in self.rows:
            if key_regex.match(row[key_pos]):
                row[edit_pos] = edit_data
                is_modify = True
        if not is_modify:
            print(f'{key_data} is not found in {key_column} column',
                  file=sys.stderr)
            exit(1)

    def get_header_data(self):
        t = TableData()
        t.head = ['column', 'example']
        for i, h in enumerate(self.head):
            val = [row[i] for row in self.rows if row[i]]
            val = val[0] if val else ''
            t.rows.append([h, val])
        return t


    def _mark_conflict(self, key_pos: int, rev_1: str,
                       head_1: List[str], body_1: List[str],
                       rev_2: str, head_2: List[str],
                       body_2: List[str]) -> Tuple[List[str], List[List[str]]]:
        '''
        2組のヘッダーと行をセルレベルで比較してコンフリクトマーカーをつける
        :param key_pos: 行を一意に識別するキーカラム名(primary key)
        :return:
        '''
        # 行が多い方のデータを判定する

        many_col_head = head_1
        less_col_head = head_2
        if len(head_1) < len(head_2):
            many_col_head = head_2
            less_col_head = head_1

        # カラム追加が何番目のカラムかを把握する
        add_col_indexes = []  # many_col_headの何番目が追加カラムか
        many_cur = 0
        less_cur = 0
        for i in range(len(many_col_head)):
            if less_cur > len(less_col_head) - 1:
                add_col_indexes.append(many_cur)
                many_cur += 1
                less_cur += 1
                continue
            if many_col_head[many_cur] != less_col_head[less_cur]:
                add_col_indexes.append(many_cur)
                many_cur += 1
                continue
            many_cur += 1
            less_cur += 1

        # body1の1行に対し、キーが一致しているbody2を比較していき、
        # コンフリクトを解決していく
        #   コンフリクト解決単位でresolved_blockとして追加していく
        resolved_blocks = []
        for body_1_row in body_1:
            body_1_key = body_1_row[key_pos]

            is_find = False
            for body_2_row in body_2:
                body_2_key = body_2_row[key_pos]
                if body_1_key == body_2_key:
                    # 行の値が異なるパターン(一致するキーがあった)
                    is_find = True
                    # カラムはどちらが多いかを把握
                    many_col_rev = rev_1
                    less_col_rev = rev_2
                    many_col_row = body_1_row
                    less_col_row = body_2_row
                    if len(body_1_row) < len(body_2_row):
                        many_col_rev = rev_2
                        less_col_rev = rev_1
                        many_col_row = body_2_row
                        less_col_row = body_1_row

                    # カラムの数が違う場合、カラム追加のコンフリクトマーカーを置く
                    resolved_row = []
                    less_cur = 0
                    for i in range(len(many_col_head)):
                        if less_cur > len(less_col_head) - 1:
                            resolved_row.append(
                                f'<< {many_col_row[i]} >> [{many_col_rev}]'
                            )
                            continue
                        if i in add_col_indexes:
                            resolved_row.append(
                                f'<< {many_col_row[i]} >> [{many_col_rev}]'
                            )
                            continue
                        resolved_row.append(
                            less_col_row[less_cur]
                        )
                        less_cur += 1
                    # 各セルの値が異なるかどうか判定
                    is_different_row = False
                    less_cur = 0
                    for i in range(len(less_col_row)):
                        if i > len(less_col_head) - 1:
                            continue
                        if i in add_col_indexes:
                            continue
                        if many_col_row[i] != less_col_row[less_cur]:
                            is_different_row = True
                            break
                        less_cur += 1

                    if is_different_row:
                        # セルの値が違うならコンフリクトマーカーをつける
                        resolved_blocks.append(ResolvedBlockMultiline(
                            'add_col',
                            [f'<<<<<<< {many_col_rev}'],
                            [many_col_row],
                            [f'======='],
                            [resolved_row],
                            [f'>>>>>>> {less_col_rev}']
                        ))
                    else:
                        # セルの値が一致しているならそのまま返す
                        resolved_blocks.append(ResolvedBlockOneline('same_row', [resolved_row]))
                    break
            if not is_find:
                # 行追加パターン(行が多い方のキーが少ない方になかった)
                resolved_blocks.append(ResolvedBlockMultiline(
                    'add_row_1',
                    [f'<<<<<<< {rev_1}'],
                    [body_1_row],
                    [f'======='],
                    [[]],
                    [f'>>>>>>> {rev_2}']
                ))

        # body2の行に対しbody1の行を比較していき、body2にあってbody1にない行を追加する
        #   body1とbody2でキーが一致している場合の処理は上でやっているのでやらない
        for body_2_row in body_2:
            body_2_key = body_2_row[key_pos]
            is_find = False
            for body_1_row in body_1:
                body_1_key = body_1_row[key_pos]
                if body_2_key == body_1_key:
                    is_find = True
            if not is_find:
                # 行追加パターン(行が多い方のキーが少ない方になかった)
                resolved_blocks.append(ResolvedBlockMultiline(
                    'add_row_2',
                    [f'<<<<<<< {rev_1}'],
                    [[]],
                    [f'======='],
                    [body_2_row],
                    [f'>>>>>>> {rev_2}']
                ))

        # 連続した同じresolved_block同士はつなぎ合わせて
        # resolved_rowsを作っていく
        _resolved_rows = []
        temp_block = None
        for index, block in enumerate(resolved_blocks):
            if not temp_block:
                temp_block = block
                continue
            if block.resolve_type == temp_block.resolve_type:
                temp_block.concat(block)
            else:
                _resolved_rows.extend(temp_block.to_rows())
                temp_block = block
        if temp_block:
            _resolved_rows.extend(temp_block.to_rows())

        resolved_rows = _resolved_rows
        return many_col_head, resolved_rows

    def resolve(self, key=None):
        '''
        コンフリクトしたtsvファイルを見やすい形式に書き換える
        :param key: tsvの行を一意に特定するカラム名(primary key)
        :return:
        '''
        # キーが指定されないときは一番左のカラムをキーとする
        key_pos = self.head.index(key) if key else 0

        marker_begin = re.compile(r'^<<<<<<< .*$')
        marker_middle = re.compile(r'^=======$')
        marker_end = re.compile(r'^>>>>>>> .*$')
        rev_begin = None  # 開始マーカーのついているリビジョン
        rev_end = None  # 終了マーカーのついているリビジョン
        before_middle = True
        rows_begin = []  # 開始マーカーから中間マーカーまでの行
        rows_end = []  # 中間マーカーから終了マーカーまでの行
        resolved_body = []  # 変換後の行
        resolved_head = []  # 変換後のヘッダー
        # マーカーを識別してコンフリクト部分をわかりやすい形に変換する
        for row in self.rows:
            if marker_begin.search(row[0]):
                rev_begin = row[0].lstrip('<<<<<<< ')
                rev_end = None
                before_middle = True
                rows_begin = []
                rows_end = []
                continue

            if marker_middle.search(row[0]):
                before_middle = False
                continue

            # 終了マーカーを検出したらコンフリクトを処理する
            if marker_end.search(row[0]):
                rev_end = row[0].lstrip('>>>>>>> ')

                if marker_begin.search(self.rows[0][0]) or marker_end.search(
                        self.rows[0][0]):
                    # テーブル全体がコンフリクトしている場合(カラム追加パターン)
                    head_begin = rows_begin[0]
                    body_begin = rows_begin[1:]
                    head_end = rows_end[0]
                    body_end = rows_end[1:]
                    # コンフリクトしている部分をセルレベルで比較して
                    # 変換する(同一キーを持つ行は同じ行として比較する)
                    if rev_begin == 'HEAD':
                        resolved_head, partial_resolved = self._mark_conflict(
                            key_pos, rev_begin, head_begin, body_begin,
                            rev_end, head_end, body_end)
                    else:
                        resolved_head, partial_resolved = self._mark_conflict(
                            key_pos, rev_end, head_end, body_end, rev_begin,
                            head_begin, body_begin)
                    resolved_body += partial_resolved
                else:
                    # テーブルの一部がコンフリクトしている場合
                    # (カラム追加が無いパターン)
                    head_begin = self.head
                    body_begin = rows_begin
                    head_end = self.head
                    body_end = rows_end
                    # コンフリクトしている部分をセルレベルで比較して変換する
                    # (同一キーを持つ行は同じ行として比較する)
                    if rev_begin == 'HEAD':
                        resolved_head, partial_resolved = self._mark_conflict(
                            key_pos, rev_begin, head_begin, body_begin,
                            rev_end, head_end, body_end)
                    else:
                        resolved_head, partial_resolved = self._mark_conflict(
                            key_pos, rev_end, head_end, body_end, rev_begin,
                            head_begin, body_begin)
                    resolved_body += partial_resolved

                rev_begin = None
                rev_end = None

                continue

            if rev_begin and before_middle:
                rows_begin.append(row)

            if rev_begin and not before_middle:
                rows_end.append(row)

            # コンフリクトしてない部分についてはなにもしない
            if not rev_begin and not rev_end:
                resolved_body.append(row)

        self.head = resolved_head
        self.rows = resolved_body

    def _count_str_len(self, s) -> int:
        '''
        2バイト文字を考慮した文字数カウント
        :param s:
        :return:
        '''
        count = 0
        for c in s:
            r = unicodedata.east_asian_width(c)
            if r == 'H' or r == 'Na' or r == 'N':
                count += 1
            else:
                count += 2
        return count

    def _ljust(self, s, length, gap=' ') -> str:
        l = self._count_str_len(s)
        gap_num = length - l
        gap_str = gap * gap_num if gap_num else ''
        return s + gap_str

    def get_format_str(self):
        '''
        コンソールに表示しやすいstr形式に変換する
        :return:
        '''
        delim = ' '
        max_cell_len = []
        for i, h in enumerate(self.head):
            # カラムの最大文字数を計算
            candidates = [self._count_str_len(h)] + [self._count_str_len(row[i]) for row in self.rows if i < len(row)]
            max_cell_len.append(max(candidates))

        result = [delim.join(
            [self._ljust(x, max_cell_len[i], ' ') for i, x in enumerate(self.head)])]
        for row in self.rows:
            result_row = delim.join(
                [self._ljust(row[i], max_cell_len[i], ' ') for i, x in
                 enumerate(self.head) if i < len(row)])
            result.append(result_row)
        return '\n'.join(result)


def show_table_with_less(table: TableData) -> None:
    '''
    less コマンドを使用してtable dataを表示する
    :param table:
    '''

    _, temp_p = tempfile.mkstemp()
    with open(temp_p, 'w') as f:
        f.write(table.get_format_str())
    subprocess.run(f'less -S -i {temp_p}', shell=True)


def choice_interactive_selection(candidates: List[Tuple[str, str]],
                                 prompt: str = 'please select number',
                                 max_choices: int = None
                                 ) -> List[str]:
    input_str = ''
    clear_str = 'c'
    finish_str = 'q'
    input_dict = {}
    while True:
        input_candidates = {str(k): x for k, x in enumerate(candidates) if
                            str(k) not in input_dict.keys()}
        input_candidates[clear_str] = ['', 'clear selection']
        input_candidates[finish_str] = ['', 'finish to input']
        choice_num_str = ''
        if max_choices:
            choice_num_str = f'{len(input_dict)}/{max_choices}'
        print()
        print(f'selected {choice_num_str}:'
              f' [ {", ".join([x[0] for x in input_dict.values()])} ]')
        for number, candidate in input_candidates.items():
            print(f'[{number}] {candidate[1]}')

        input_str = input(f'{prompt}: ')
        if input_str == clear_str:
            input_dict.clear()
        elif input_str == finish_str:
            break
        elif input_str in input_candidates.keys():
            input_dict[input_str] = input_candidates[input_str]
        else:
            print(f'invalid input: {input_str}')
        if max_choices and len(input_dict) >= max_choices:
            break
    return [x[0] for x in input_dict.values()]


def cmd_add_column(args):
    input_file: str = args.INPUT_FILE
    name: str = args.name
    default: str = args.default
    before: str = args.before
    output: str = args.output
    less: bool = args.less

    table = TableData()
    table.load(input_file)

    if before and before not in table.head:
        print(f'{before} is not found in header', file=sys.stderr)
        exit(1)

    table.add_column(name, default, before)

    if less and output:
        print(
            f'both less and output option cannot use together',
            file=sys.stderr)
        exit(1)

    if output:
        table.save(Path(output))
        print(f'save completed in {output}')
    elif less:
        show_table_with_less(table)
    else:
        print(table.get_format_str())


def cmd_remove_column(args):
    input_file: str = args.INPUT_FILE
    name: str = args.name
    output: str = args.output
    less: bool = args.less

    table = TableData()
    table.load(input_file)

    if name and name not in table.head:
        print(f'{name} is not found in header', file=sys.stderr)
        exit(1)

    table.remove_column(name)

    if less and output:
        print(
            f'both less and output option cannot use together',
            file=sys.stderr)
        exit(1)

    if output:
        table.save(Path(output))
        print(f'save completed in {output}')
    elif less:
        show_table_with_less(table)
    else:
        print(table.get_format_str())


def cmd_edit(args):
    input_file: str = args.INPUT_FILE
    key_column: str = args.key_column
    key_data: str = args.key_data
    edit_column: str = args.edit_column
    edit_data: str = args.edit_data
    output: str = args.output
    less: bool = args.less

    table = TableData()
    table.load(input_file)

    if key_column and key_column not in table.head:
        print(f'{key_column} is not found in header', file=sys.stderr)
        exit(1)

    if edit_column and edit_column not in table.head:
        print(f'{edit_column} is not found in header', file=sys.stderr)
        exit(1)

    table.edit_data(key_column, key_data, edit_column, edit_data)

    if less and output:
        print(
            f'both less and output option cannot use together',
            file=sys.stderr)
        exit(1)

    if output:
        table.save(Path(output))
        print(f'save completed in {output}')
    elif less:
        show_table_with_less(table)
    else:
        print(table.get_format_str())


def cmd_view(args):
    input_files: List[str] = args.INPUT_FILE
    columns: List[str] = args.column
    sort: str = args.sort
    reverse: bool = args.reverse
    on_str: str = args.on
    header: bool = args.header
    interactive: bool = args.interactive
    output: str = args.output
    less: bool = args.less
    table = TableData()

    on: Union[list, List[str]] = [] if on_str is None else on_str.split('=')
    for index, input_file in enumerate(input_files):
        if index == 0:
            table.load(Path(input_file))
        else:
            t = TableData()
            t.load(Path(input_file))
            if interactive:
                heads = [(x[0], x[0] + '\tex. ' + x[1]) for x in
                         table.get_header_data().rows]
                heads += [(x[0], x[0] + '\tex. ' + x[1]) for x in
                          t.get_header_data().rows]
                on = choice_interactive_selection(
                    heads,
                    prompt='please select column number for join',
                    max_choices=len(input_files)
                )
            if on:
                on_col_our = on[0]
                on_col_their = on[index]
            else:
                on_col_our = table.head[0]
                on_col_their = t.head[0]
            table.join(t, on_col_our=on_col_our, on_col_their=on_col_their)

    if interactive:
        choices = [(x[0], x[0] + '\tex. ' + x[1]) for x in
                   table.get_header_data().rows]
        columns = choice_interactive_selection(
            choices,
            prompt='please select column number to show'
        )

    if columns:
        original_head = copy.deepcopy(table.head)
        for h in original_head:
            if h not in columns:
                table.remove_column(h)

    if sort:
        table.sort(sort, reverse)

    if less and output:
        print(
            f'both less and output option cannot use together',
            file=sys.stderr)
        exit(1)

    if header:
        table = table.get_header_data()

    if output:
        table.save(Path(output))
        print(f'save completed in {output}')
    elif less:
        show_table_with_less(table)
    else:
        print(table.get_format_str())


def cmd_resolve(args):
    input_file: str = args.INPUT_FILE
    key: str = args.key
    output: str = args.output
    less: bool = args.less
    table = TableData()
    table.load(input_file)
    if not table.is_conflict:
        print(f'{input_file} is not conflict', file=sys.stderr)
        exit(1)

    if key and key not in table.head:
        print(f'{key} is not found in header', file=sys.stderr)
        exit(1)

    table.resolve(key)

    if less and output:
        print(
            f'both less and output option cannot use together',
            file=sys.stderr)
        exit(1)

    if output:
        table.save(Path(output))
        print(f'save completed in {output}')
    elif less:
        show_table_with_less(table)
    else:
        print(table.get_format_str())


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=f'togai tsv tool v{VERSION}')
    subparsers = parser.add_subparsers(help='sub-commands')
    # sub commandを指定してないときにhelpを表示するために必要
    subparsers.required = True
    # sub commandを指定してないときにhelpを表示するために必要
    subparsers.dest = 'SUB_COMMAND'

    parser_view = subparsers.add_parser('view', help='show tsv file')
    parser_view.add_argument('-c', '--column', type=str, action='append',
                             required=False,
                             help='column name to display'
                                  '(avairable to specify multipe value)')
    parser_view.add_argument('-on', type=str, required=False,
                             help='condition for join multiple files'
                                  '(col1=col2...)')
    parser_view.add_argument('-s', '--sort', type=str, required=False,
                             help='column name for sorting rows')
    parser_view.add_argument('-r', '--reverse', action='store_true',
                             help='order direction for sorting rows')
    parser_view.add_argument('-he', '--header', action='store_true',
                             help='only show header')
    parser_view.add_argument('-i', '--interactive', action='store_true',
                             help='ask options before view')
    parser_view.add_argument('-o', '--output', type=str, required=False,
                             help='file to output result')
    parser_view.add_argument('-l', '--less', action='store_true',
                             help='use less command to show output')
    parser_view.add_argument('INPUT_FILE', type=str, nargs='+',
                             help='tsv path to display'
                                  '(if spcify mutiple values,'
                                  ' then join rows with condition'
                                  ' of -on parameter)')
    parser_view.set_defaults(func=cmd_view)

    parser_add_column = subparsers.add_parser('add-column',
                                              help='add column to tsv file')
    parser_add_column.add_argument('-n', '--name', type=str, required=True,
                                   help='column name to add')
    parser_add_column.add_argument('-d', '--default', type=str, default='',
                                   help='default value of adding column')
    parser_add_column.add_argument('-b', '--before', type=str, required=False,
                                   help='column name of insert position'
                                        '(if not specify,'
                                        ' then column add last position)')
    parser_add_column.add_argument('-o', '--output', type=str, required=False,
                                   help='file to output result')
    parser_add_column.add_argument('-l', '--less', action='store_true',
                                   help='use less command to show output')
    parser_add_column.add_argument('INPUT_FILE', type=str,
                                   help='tsv file to add column')
    parser_add_column.set_defaults(func=cmd_add_column)

    parser_remove_column = subparsers.add_parser('remove-column',
                                                 help='remove column'
                                                      ' from tsv file')
    parser_remove_column.add_argument('-n', '--name', type=str, required=True,
                                      help='column name to remove')
    parser_remove_column.add_argument('-o', '--output', type=str,
                                      required=False,
                                      help='file to output result')
    parser_remove_column.add_argument('-l', '--less', action='store_true',
                                      help='use less command to show output')
    parser_remove_column.add_argument('INPUT_FILE', type=str,
                                      help='tsv path to remove column')
    parser_remove_column.set_defaults(func=cmd_remove_column)

    parser_edit_column = subparsers.add_parser('edit',
                                               help='edit value in tsv file')
    parser_edit_column.add_argument('-kc', '--key-column', type=str,
                                    required=True,
                                    help='key column name for editing value')
    parser_edit_column.add_argument('-kd', '--key-data', type=str,
                                    required=True,
                                    help='key value '
                                         'for editing value (regex str)')
    parser_edit_column.add_argument('-ec', '--edit-column', type=str,
                                    required=True,
                                    help='column name of editing column')
    parser_edit_column.add_argument('-ed', '--edit-data', type=str,
                                    required=True, help='value of editing')
    parser_edit_column.add_argument('-o', '--output', type=str, required=False,
                                    help='file to output result')
    parser_edit_column.add_argument('-l', '--less', action='store_true',
                                    help='use less command to show output')
    parser_edit_column.add_argument('INPUT_FILE', type=str,
                                    help='tsv path to edit data')
    parser_edit_column.set_defaults(func=cmd_edit)

    parser_resolve = subparsers.add_parser('resolve',
                                           help='convert conflict marker'
                                                ' to human readable')
    parser_resolve.add_argument('-k', '--key', type=str, required=False,
                                help='key column name'
                                     ' that identifying unique row'
                                     '(if not specify,'
                                     ' then use most left column)')
    parser_resolve.add_argument('-o', '--output', type=str, required=False,
                                help='file to output result')
    parser_resolve.add_argument('-l', '--less', action='store_true',
                                help='use less command to show output')
    parser_resolve.add_argument('INPUT_FILE', type=str,
                                help='tsv path of conflicting')
    parser_resolve.set_defaults(func=cmd_resolve)

    args = parser.parse_args()

    args.func(args)
